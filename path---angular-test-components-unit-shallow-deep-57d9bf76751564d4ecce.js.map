{"version":3,"sources":["webpack:///path---angular-test-components-unit-shallow-deep-57d9bf76751564d4ecce.js","webpack:///./.cache/json/angular-test-components-unit-shallow-deep.json"],"names":["webpackJsonp","335","module","exports","data","markdownRemark","html","frontmatter","path","title","author","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,m5EAAw3BC,aAAqjDC,KAAA,6CAAAC,MAAA,uDAAAC,OAAA,mBAAAC,KAAA,gBAAqKC","file":"path---angular-test-components-unit-shallow-deep-57d9bf76751564d4ecce.js","sourcesContent":["webpackJsonp([274223600717461],{\n\n/***/ 335:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<hr>\\n<p>Typical <strong>Angular</strong> application is a set of <em>Container / Smart ? Stateful</em> components, containing one ore more re-usable <em>Presentation / Dumb / Stateless</em> components.\\nConsider an example <code>&#x3C;Details-Container/></code> component is a container component, responsible for providing and / or managing state <code>details</code>, (ex. using ngrx store, state selectors and/or actions).\\nIt uses two presentation components <code>&#x3C;Location-Presentation/></code> and <code>&#x3C;Contact-Presentation/></code> , which receive data as input properties to rendered.</p>\\n<pre><code>&#x3C;Details-Container>\\n\\n  &#x3C;h3>{{details.name}}&#x3C;/h3>\\n  &#x3C;p>{{details.description}}&#x3C;/p>\\n\\n   &#x3C;Location-Presentation [data-location]=\\\"details.address\\\"/>\\n   &#x3C;Contact-Presentation [data-contact]=\\\"details.contact\\\"/>\\n&#x3C;/DetailsPage-Container>\\n</code></pre>\\n<p>How should we test this arrangement?</p>\\n<p>Assuming that we have already written and tested our presentation components in isolation,  we will first focus on testing our container component.</p>\\n<p>We should test our <code>Details-Container</code> at 3 levels</p>\\n<ol>\\n<li><strong>Unit Test</strong> The container component Renders <code>details.name</code> and <code>details.description</code>, the stuff it is responsible for rendering properly</li>\\n<li><strong>Shallow Test</strong> The container passes the correct inputs to the two presentation components, and is able t receive expected events, and react appropriately</li>\\n<li><strong>Deep Test</strong> Treat the whole arrangement as one, and assert for a given detail, it renders properly.</li>\\n</ol>\\n<h2>Unit Test</h2>\\n<p><strong>We must <em>Unit Test</em> components by mocking all dependencies</strong></p>\\n<ol>\\n<li>Very Simple to write, no need for TestBed, just work with jasmine spies and mocks</li>\\n<li>Run them as often, fast and effective</li>\\n</ol>\\n<h2>Shallow and Deep Tests</h2>\\n<p><strong>Since components compile to be actual DOM in the browser we must also test them with an actual component</strong></p>\\n<ol>\\n<li>Need TestComponent, and TestBed, to create a TestModule which compiles your fake TestComponent with directive to be tested</li>\\n<li>Dependencies to the fake TestComponent are mocked, instead of mocking the containerRef to directive</li>\\n<li>Besides little complexity setting up the TestBed, fast and effective</li>\\n</ol>\",\"frontmatter\":{\"path\":\"/angular-test-components-unit-shallow-deep\",\"title\":\"Testing Angular Directives with a fake TestComponent\",\"author\":\"Simar Paul Singh\",\"date\":\"2018-08-19\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---angular-test-components-unit-shallow-deep-57d9bf76751564d4ecce.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<hr>\\n<p>Typical <strong>Angular</strong> application is a set of <em>Container / Smart ? Stateful</em> components, containing one ore more re-usable <em>Presentation / Dumb / Stateless</em> components.\\nConsider an example <code>&#x3C;Details-Container/></code> component is a container component, responsible for providing and / or managing state <code>details</code>, (ex. using ngrx store, state selectors and/or actions).\\nIt uses two presentation components <code>&#x3C;Location-Presentation/></code> and <code>&#x3C;Contact-Presentation/></code> , which receive data as input properties to rendered.</p>\\n<pre><code>&#x3C;Details-Container>\\n\\n  &#x3C;h3>{{details.name}}&#x3C;/h3>\\n  &#x3C;p>{{details.description}}&#x3C;/p>\\n\\n   &#x3C;Location-Presentation [data-location]=\\\"details.address\\\"/>\\n   &#x3C;Contact-Presentation [data-contact]=\\\"details.contact\\\"/>\\n&#x3C;/DetailsPage-Container>\\n</code></pre>\\n<p>How should we test this arrangement?</p>\\n<p>Assuming that we have already written and tested our presentation components in isolation,  we will first focus on testing our container component.</p>\\n<p>We should test our <code>Details-Container</code> at 3 levels</p>\\n<ol>\\n<li><strong>Unit Test</strong> The container component Renders <code>details.name</code> and <code>details.description</code>, the stuff it is responsible for rendering properly</li>\\n<li><strong>Shallow Test</strong> The container passes the correct inputs to the two presentation components, and is able t receive expected events, and react appropriately</li>\\n<li><strong>Deep Test</strong> Treat the whole arrangement as one, and assert for a given detail, it renders properly.</li>\\n</ol>\\n<h2>Unit Test</h2>\\n<p><strong>We must <em>Unit Test</em> components by mocking all dependencies</strong></p>\\n<ol>\\n<li>Very Simple to write, no need for TestBed, just work with jasmine spies and mocks</li>\\n<li>Run them as often, fast and effective</li>\\n</ol>\\n<h2>Shallow and Deep Tests</h2>\\n<p><strong>Since components compile to be actual DOM in the browser we must also test them with an actual component</strong></p>\\n<ol>\\n<li>Need TestComponent, and TestBed, to create a TestModule which compiles your fake TestComponent with directive to be tested</li>\\n<li>Dependencies to the fake TestComponent are mocked, instead of mocking the containerRef to directive</li>\\n<li>Besides little complexity setting up the TestBed, fast and effective</li>\\n</ol>\",\"frontmatter\":{\"path\":\"/angular-test-components-unit-shallow-deep\",\"title\":\"Testing Angular Directives with a fake TestComponent\",\"author\":\"Simar Paul Singh\",\"date\":\"2018-08-19\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/angular-test-components-unit-shallow-deep.json\n// module id = 335\n// module chunks = 274223600717461"],"sourceRoot":""}