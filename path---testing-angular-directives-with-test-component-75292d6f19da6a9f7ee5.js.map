{"version":3,"sources":["webpack:///path---testing-angular-directives-with-test-component-75292d6f19da6a9f7ee5.js","webpack:///./.cache/json/testing-angular-directives-with-test-component.json"],"names":["webpackJsonp","347","module","exports","data","markdownRemark","html","frontmatter","path","title","author","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ihIAAugIC,aAAgCC,KAAA,kDAAAC,MAAA,2DAAAC,OAAA,mBAAAC,KAAA,gBAA8KC","file":"path---testing-angular-directives-with-test-component-75292d6f19da6a9f7ee5.js","sourcesContent":["webpackJsonp([190868841189419],{\n\n/***/ 347:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<hr>\\n<p><strong>Angular Directives</strong> are an important construct in angular to make <strong>DOM</strong> <em>manipulation</em> and / or <em>event handling</em> abstract.</p>\\n<p>We should <em>Unit Test</em> directives by mocking all dependencies with jasmine mocks and spies. We should also <em>Shallow / Deep Test</em> directives using concrete Components (Compiled DOM). </p>\\n<p>A reasonable approach is to create <strong><em>TestComponent</em></strong> or pick up any component which uses the directive we want to test. <strong>Dependencies to the <em>TestComponent</em> are mocked</strong>, but the <strong>directive itself tests with a concrete component (compiled DOM)</strong>. </p>\\n<p>This involves setting up of a <em>TestBed</em> to create a <em>TestModule (also creates a zone for testing)</em> and compile <em>TestComponent</em> with the directive to be tested.</p>\\n<p>Let us write a simple directive DisableLinkDirective which will provide <code>[attr.disabled]=\\\"condition\\\"</code> functionality of anchor links <code>&#x3C;a/></code> so they can be disabled like <code>&#x3C;button/></code> natively do.</p>\\n<pre><code>import {Directive, HostListener} from '@angular/core';\\n\\n@Directive({\\n  selector: 'a[disabled]'\\n})\\nexport class DisableLinkDirective {\\n\\n  @HostListener('click', ['$event'])\\n  click(event: Event) {\\n    console.log('event', event);\\n    event.preventDefault();\\n  }\\n}\\n</code></pre>\\n<p>We will test this directive with <code>TestDisableLinkComponent</code> component that has compiles anchor-links <code>&#x3C;a/></code> with <code>disabled</code> attribute.</p>\\n<pre><code>import {DisableLinkDirective} from './disable-link.directive';\\nimport {Component, DebugElement} from '@angular/core';\\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\\nimport {By} from '@angular/platform-browser';\\n// creating a test component in the spec file\\n@Component(\\n  {\\n    selector: 'ngx-mix-test-disable-link-directive',\\n    template: `\\n    &#x3C;div>\\n     &#x3C;a id=\\\"disabled-link\\\" disabled (click)=\\\"onClick()\\\">Disabled&#x3C;/a>\\n     &#x3C;a id=\\\"normal-link\\\" (click)=\\\"onClick()\\\">Normal&#x3C;/a>\\n    &#x3C;/div>\\n    `\\n  }\\n)\\nclass TestDisableLinkComponent {\\ntoggle = false;\\nonClick() {\\n    this.toggle = !this.toggle;\\n  }\\n}\\n// tests start here\\ndescribe('DisableLinkDirective', () => {\\nlet component: TestDisableLinkComponent;\\n  let fixture: ComponentFixture ;\\nbeforeEach(async () => {\\nawait TestBed.configureTestingModule({\\n      declarations: [TestDisableLinkComponent, DisableLinkDirective]\\n    }).compileComponents();\\n  });\\nbeforeEach(async () => {\\n    fixture = TestBed.createComponent(TestDisableLinkComponent);\\n    component = fixture.componentInstance;\\n    fixture.detectChanges();\\n  });\\nit('should create an instance', () => {\\n    const directive = new DisableLinkDirective();\\n    expect(directive).toBeTruthy();\\n  });\\nit('should not toggle between enabled / disabled when the link with disabled attribute is clicked', async () => {\\n    const testDe: DebugElement = fixture.debugElement;\\n    const linkDe = testDe.query(By.css('#disabled-link'));\\n    const link: HTMLElement = linkDe.nativeElement;\\n    await expect(link.getAttribute('disabled')).not.toBe(null);\\n    const toggleValueBeforeClick = component.toggle;\\n    linkDe.triggerEventHandler('click', null);\\n    fixture.detectChanges();\\n    await fixture.whenStable();\\n    await expect(toggleValueBeforeClick).toBe(component.toggle);\\n  });\\nit('should toggle between enabled / disabled when the link does not have disabled attribute', async () => {\\n    const testDe: DebugElement = fixture.debugElement;\\n    const linkDe = testDe.query(By.css('#normal-link'));\\n    const link: HTMLElement = linkDe.nativeElement;\\n    await expect(link.getAttribute('disabled')).toBe(null);\\n    const toggleValueBeforeClick = component.toggle;\\n    linkDe.triggerEventHandler('click', null);\\n    fixture.detectChanges();\\n    await fixture.whenStable();\\n    await expect(toggleValueBeforeClick).not.toBe(component.toggle);\\n  });\\n});\\n</code></pre>\",\"frontmatter\":{\"path\":\"/testing-angular-directives-with-test-component\",\"title\":\"Testing Angular Directives with a Test or Real Component\",\"author\":\"Simar Paul Singh\",\"date\":\"2018-07-12\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---testing-angular-directives-with-test-component-75292d6f19da6a9f7ee5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<hr>\\n<p><strong>Angular Directives</strong> are an important construct in angular to make <strong>DOM</strong> <em>manipulation</em> and / or <em>event handling</em> abstract.</p>\\n<p>We should <em>Unit Test</em> directives by mocking all dependencies with jasmine mocks and spies. We should also <em>Shallow / Deep Test</em> directives using concrete Components (Compiled DOM). </p>\\n<p>A reasonable approach is to create <strong><em>TestComponent</em></strong> or pick up any component which uses the directive we want to test. <strong>Dependencies to the <em>TestComponent</em> are mocked</strong>, but the <strong>directive itself tests with a concrete component (compiled DOM)</strong>. </p>\\n<p>This involves setting up of a <em>TestBed</em> to create a <em>TestModule (also creates a zone for testing)</em> and compile <em>TestComponent</em> with the directive to be tested.</p>\\n<p>Let us write a simple directive DisableLinkDirective which will provide <code>[attr.disabled]=\\\"condition\\\"</code> functionality of anchor links <code>&#x3C;a/></code> so they can be disabled like <code>&#x3C;button/></code> natively do.</p>\\n<pre><code>import {Directive, HostListener} from '@angular/core';\\n\\n@Directive({\\n  selector: 'a[disabled]'\\n})\\nexport class DisableLinkDirective {\\n\\n  @HostListener('click', ['$event'])\\n  click(event: Event) {\\n    console.log('event', event);\\n    event.preventDefault();\\n  }\\n}\\n</code></pre>\\n<p>We will test this directive with <code>TestDisableLinkComponent</code> component that has compiles anchor-links <code>&#x3C;a/></code> with <code>disabled</code> attribute.</p>\\n<pre><code>import {DisableLinkDirective} from './disable-link.directive';\\nimport {Component, DebugElement} from '@angular/core';\\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\\nimport {By} from '@angular/platform-browser';\\n// creating a test component in the spec file\\n@Component(\\n  {\\n    selector: 'ngx-mix-test-disable-link-directive',\\n    template: `\\n    &#x3C;div>\\n     &#x3C;a id=\\\"disabled-link\\\" disabled (click)=\\\"onClick()\\\">Disabled&#x3C;/a>\\n     &#x3C;a id=\\\"normal-link\\\" (click)=\\\"onClick()\\\">Normal&#x3C;/a>\\n    &#x3C;/div>\\n    `\\n  }\\n)\\nclass TestDisableLinkComponent {\\ntoggle = false;\\nonClick() {\\n    this.toggle = !this.toggle;\\n  }\\n}\\n// tests start here\\ndescribe('DisableLinkDirective', () => {\\nlet component: TestDisableLinkComponent;\\n  let fixture: ComponentFixture ;\\nbeforeEach(async () => {\\nawait TestBed.configureTestingModule({\\n      declarations: [TestDisableLinkComponent, DisableLinkDirective]\\n    }).compileComponents();\\n  });\\nbeforeEach(async () => {\\n    fixture = TestBed.createComponent(TestDisableLinkComponent);\\n    component = fixture.componentInstance;\\n    fixture.detectChanges();\\n  });\\nit('should create an instance', () => {\\n    const directive = new DisableLinkDirective();\\n    expect(directive).toBeTruthy();\\n  });\\nit('should not toggle between enabled / disabled when the link with disabled attribute is clicked', async () => {\\n    const testDe: DebugElement = fixture.debugElement;\\n    const linkDe = testDe.query(By.css('#disabled-link'));\\n    const link: HTMLElement = linkDe.nativeElement;\\n    await expect(link.getAttribute('disabled')).not.toBe(null);\\n    const toggleValueBeforeClick = component.toggle;\\n    linkDe.triggerEventHandler('click', null);\\n    fixture.detectChanges();\\n    await fixture.whenStable();\\n    await expect(toggleValueBeforeClick).toBe(component.toggle);\\n  });\\nit('should toggle between enabled / disabled when the link does not have disabled attribute', async () => {\\n    const testDe: DebugElement = fixture.debugElement;\\n    const linkDe = testDe.query(By.css('#normal-link'));\\n    const link: HTMLElement = linkDe.nativeElement;\\n    await expect(link.getAttribute('disabled')).toBe(null);\\n    const toggleValueBeforeClick = component.toggle;\\n    linkDe.triggerEventHandler('click', null);\\n    fixture.detectChanges();\\n    await fixture.whenStable();\\n    await expect(toggleValueBeforeClick).not.toBe(component.toggle);\\n  });\\n});\\n</code></pre>\",\"frontmatter\":{\"path\":\"/testing-angular-directives-with-test-component\",\"title\":\"Testing Angular Directives with a Test or Real Component\",\"author\":\"Simar Paul Singh\",\"date\":\"2018-07-12\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/testing-angular-directives-with-test-component.json\n// module id = 347\n// module chunks = 190868841189419"],"sourceRoot":""}